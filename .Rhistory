```
# Exploratory data analysis
## Reviewer counts
First let's take a look at who the reviewers are:
```{r}
burritos_rev_count <- burritos %>%
mutate(Reviewer = fct_lump(Reviewer, n = 5)) %>%
count(Reviewer) %>%
mutate(Reviewer = fct_reorder(Reviewer, n, .desc = TRUE)) %>%
arrange(desc(n))
burritos_rev_count
ggplot(data = burritos_rev_count, mapping = aes(x = Reviewer, y = n)) +
geom_bar(stat = "identity") +
labs(title = "Distribution of reviewers", x = "", y = "")
```
Seems like `r burritos_rev_count$Reviewer[1]`  has been eating a lot of burritos!
## Overall rating vs. cost
Next we visualize the relationship between the cost and overall rating of the
burritos. The relationship appears to be positive, though the one extremely
expensive burrito makes it difficult to assess the strength of the relationship.
```{r}
ggplot(data = burritos, mapping = aes(x = Cost, y = overall)) +
geom_point() +
labs(title = "Overall rating vs. cost", y = "Overall rating")
```
burritos <- read_csv(file = 'D:\Documents\03_upping-your-game\R\data\burritos_01022018.csv')
install.packages("prettydoc")
install.packages("prettydoc")
library(prettydoc)
library(shiny); runApp('GeneCompare/GeneCompareApp.R')
runApp('GeneCompare/GeneCompareApp.R')
runApp('GeneCompare/GeneCompareApp.R')
source("http://www.bioconductor.org/biocLite.R")
install.packages("BiocManager")
BiocManager::install(version = "3.10")
library(Biobase)
install.packages("Biobase")
library(BiocManager)
Biocmanager::install
BiocManager::install()
shiny::runApp('GeneCompare2')
runApp('GeneCompare2')
runApp('GeneCompare2')
runApp('GeneCompare2')
runApp('GeneCompare2')
runApp('GeneCompare2')
runApp('GeneCompare2')
runApp('GeneCompare2')
runApp('GeneCompare2')
?tabsetPanel
runApp('GeneCompare2')
runApp('GeneCompare2')
runApp('GeneCompare2')
runApp('GeneCompare2')
runApp('GeneCompare2')
runApp('GeneCompare2')
runApp('GeneCompare2')
runApp('GeneCompare2')
runApp('GeneCompare2')
runApp('GeneCompare2')
runApp('GeneCompare2')
runApp('GeneCompare2')
runApp('GeneCompare2')
runApp('GeneCompare2')
runApp('GeneCompare2')
runApp('GeneCompare2')
runApp('GeneCompare2')
runApp('GeneCompare2')
?elseif
runApp('GeneCompare2')
runApp('GeneCompare2')
runApp('GeneCompare2')
runApp('GeneCompare2')
runApp('GeneCompare2')
?summarise
runApp('GeneCompare2')
runApp('GeneCompare2')
runApp('GeneCompare2')
first()
?first
summarise(comparisons(),
n = n(),
First = first(comparisons()),
Last = last(comparisons()))
runApp('GeneCompare2')
runApp('GeneCompare2')
runApp('GeneCompare2')
runApp('GeneCompare2')
runApp('GeneCompare2')
Demo.File.1 <- read.csv("~/GeneCompare/Demo File 1.csv")
View(Demo.File.1)
first(Demo.File.1)
last(Demo.File.1)
last(Demo.File.1, n = 1)
last(Demo.File.1, n=1)
first(Demo.File.1$ID)
head(Demo.File.1)
head(Demo.File.1, n = 1)
runApp('GeneCompare2')
runApp('GeneCompare2')
first(x = Demo.File.1)
Demo.File.1[[1]]
Demo.File.1
runApp('GeneCompare2')
runApp('GeneCompare2')
library(shiny); runApp('GeneCompare/MultiGeneCompareApp.R')
runApp('GeneCompare/MultiGeneCompareApp.R')
runApp('GeneCompare/MultiGeneCompareApp.R')
runApp('MultiGeneCompare')
runApp('MultiGeneCompare')
runApp('MultiGeneCompare')
runApp('MultiGeneCompare')
runApp('MultiGeneCompare')
runApp('MultiGeneCompare')
runApp('MultiGeneCompare')
runApp('MultiGeneCompare')
shiny::runApp('MultiGeneCompare')
runApp('MultiGeneCompare')
runApp('MultiGeneCompare')
runApp('GeneCompare2/GeneCompare.R')
runApp('GeneCompare2/GeneCompare.R')
runApp('MultiGeneCompare')
runApp('GeneCompare2/GeneCompare.R')
runApp('MultiGeneCompare')
runApp('MultiGeneCompare')
runApp('MultiGeneCompare')
?for
?for
?for
?for
?for()
runApp('MultiGeneCompare')
runApp('MultiGeneCompare')
runApp('MultiGeneCompare')
runApp()
runApp('MultiGeneCompare')
runApp()
runApp('MultiGeneCompare')
runApp('MultiGeneCompare')
?vector
runApp('MultiGeneCompare')
runApp()
runApp('MultiGeneCompare')
vector(length = nrow(Demo.File.1))
vector(length = nrow(Demo.File.1), mode = "character")
runApp('test')
runApp('MultiGeneCompare')
runApp('MultiGeneCompare')
runApp('MultiGeneCompare')
runApp('MultiGeneCompare')
runApp('MultiGeneCompare')
runApp('MultiGeneCompare')
runApp('MultiGeneCompare')
?assign
runApp('MultiGeneCompare')
runApp('MultiGeneCompare')
runApp('MultiGeneCompare')
runApp('MultiGeneCompare')
runApp('MultiGeneCompare')
runApp('MultiGeneCompare')
runApp('MultiGeneCompare')
runApp('MultiGeneCompare')
runApp('MultiGeneCompare')
runApp('MultiGeneCompare')
runApp('MultiGeneCompare')
runApp()
runApp('MultiGeneCompare')
runApp('MultiGeneCompare')
runApp('MultiGeneCompare')
runApp('MultiGeneCompare')
runApp('MultiGeneCompare')
?getData()
runApp('MultiGeneCompare')
runApp('MultiGeneCompare')
runApp('test')
?lapply
?fread
runApp('test')
runApp('test')
?renderTable
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
?list()
runApp('test')
?unlist
runApp('test')
runApp('test')
csvlist <- reactive({
req(input$files)
upload = list()
for(i in 1:length(input$files[, 1])){
upload[[i]] <- read_csv(
file = input$files[[i, 'datapath']]
)
}
return(upload)
csvlist <- reactive({
req(input$files)
upload = list()
for(i in 1:length(input$files[, 1])){
upload[[i]] <- read_csv(
file = input$files[[i, 'datapath']]
)
}
return(upload)
})
server <- function(input, output) {
csvlist <- reactive({
req(input$files)
upload = list()
for(i in 1:length(input$files[, 1])){
upload[[i]] <- read_csv(
file = input$files[[i, 'datapath']]
)
}
return(upload)
})
}
)
csvlist <- reactive({
req(input$files)
upload = list()
for(i in 1:length(input$files[, 1])){
upload[[i]] <- read_csv(
file = input$files[[i, 'datapath']]
)
}
return(upload)
})
runApp('test')
?tableoutput
runApp('test')
runApp('test')
runApp('test')
runApp('test')
?vector
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
?nrow
runApp('test')
?vector
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
?append
runApp('test')
runApp('test')
runApp('test')
runApp('test')
n = 4
a=1
for(i in 1:n)
{
a[i+1] = 2*a[i]
}
for(i in 1:n){a[i+1 = 2*a[i]]}
for(i in 1:n){a[i+1] = 2*a[i]]}
for(i in 1:n){a[i+1] = 2*a[i]}
for(i in 1:n){a[i+1] = 2*a[i]}
for(i in 1:n) {
csvref <- vector()
tempdf <- paste0("df", i)
csvref[i] <- tempdf
}
tempdf
runApp('test')
runApp('test')
runApp('test')
?paste
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
?sep
runApp('test')
runApp('test')
runApp('test')
?intersect
?print
runApp('test')
?vector
runApp('test')
runApp('test')
?reduce
runApp('test')
shiny::runApp('test')
library(tidyverse)
runApp('test')
runApp('test')
runApp('test')
library(nVennR)
myV <- plotVenn(list(b = c(50,9,2,1),
c = c(50,21,2,3),
d = c(50,21,9,2,3,20),
a = c(50, 21, 9, 2,1,3,20,35)))
showSVG(myV, opacity = 0.2, borderWidth = 1)
shiny::runApp('test')
runApp('test')
?plotVenn
runApp('test')
?showSVG
runApp('test')
runApp('test')
runApp('test')
library(nVennR)
myV <- plotVenn(list(b = c(50,9,2,1),
c = c(50,21,2,3),
d = c(50,21,9,2,3,20),
a = c(50, 21, 9, 2,1,3,20,35)))
showSVG(myV, opacity = 0.2, borderWidth = 1)
showSVG(myV, opacity = 0.2, borderWidth = 1, fontScale = 2)
runApp('test')
runApp('test')
?svg
?renderImage
runApp('test')
grid.draw(myV)
grid.draw(showSVG(myV))
runApp('test')
myV2 <- showSVG(myV, opacity = 0.2, borderWidth = 1, fontScale = 2)
grid.draw(myV2)
?grid.draw
grid.draw(myV)
grid.draw(myV2)
?plotVenn
runApp('test')
runApp('test')
runApp('test')
runApp('test')
?rdata
runApp('test')
?downloadHandler
runApp('test')
?venn.diagram
runApp('test')
library(readr)
list1 <- read_csv("GeneCompare2/Demo/list1.csv")
View(list1)
list1 <- read_csv("GeneCompare2/Demo/list1.csv")
list2 <- read_csv("GeneCompare2/Demo/list2.csv")
list3 <- read_csv("GeneCompare2/Demo/list3.csv")
list4 <- read_csv("GeneCompare2/Demo/list4.csv")
list5 <- read_csv("GeneCompare2/Demo/list5.csv")
install.packages(ggvenn)
install.packages("ggvenn")
library("ggvenn")
install.packages("Rvenn")
install.packages("RVenn")
library(RVenn)
myV <- Venn(list(list1, list2, list3, list4, list5))
list(list1, list2, list3, list4, list5)
vList <- list(list1, list2, list3, list4, list5)
myV <- Venn(vList)
?Venn
vList <- lapply(list(list1, list2, list3, list4, list5), as.vector)
myV <- Venn(vList)
vList
vList <- lapply(list(list1, list2, list3, list4, list5), as_vector)
vList
myV <- Venn(vList)
ggVenn(myV)
ggvenn(myV)
install.packages("ggVennDiagram")
library(ggVennDiagram)
ggVennDiagram(myV)
if (!require(devtools)) install.packages("devtools")
devtools::install_github("yanlinlin82/ggvenn")
if (!require(devtools)) install.packages("devtools")
devtools::install_github("yanlinlin82/ggvenn")
if (!require(devtools)) install.packages("devtools")
devtools::install_github("yanlinlin82/ggvenn")
remove.packages("glue")
remove.packages(glue)
?glue
vList <- lapply(list(list1, list2, list3), as_vector)
library(nVennR)
myV <- plotVenn(list(b = c(50,9,2,1),
c = c(50,21,2,3),
d = c(50,21,9,2,3,20),
a = c(50, 21, 9, 2,1,3,20,35)))
myV2 <- showSVG(myV, opacity = 0.2, borderWidth = 1, fontScale = 2)
grid.draw(myV2)
list1 <- read_csv("GeneCompare2/Demo/list1.csv")
list2 <- read_csv("GeneCompare2/Demo/list2.csv")
list3 <- read_csv("GeneCompare2/Demo/list3.csv")
list4 <- read_csv("GeneCompare2/Demo/list4.csv")
list5 <- read_csv("GeneCompare2/Demo/list5.csv")
vList <- lapply(list(list1, list2, list3), as_vector)
myV <- Venn(vList)
ggVennDiagram(myV)
library(RVenn)
vList <- lapply(list(list1, list2, list3), as_vector)
library(tidyvers)
library(tidyverse)
vList <- lapply(list(list1, list2, list3), as_vector)
myV <- Venn(vList)
ggVenn(myV)
?RVenn
?ggvenn
ggvenn(myV)
vList <- lapply(list(list1, list2, list3, list4, list5), as_vector)
setmap(myV)
vList <- lapply(list(list1, list2, list3, list4, list5), as_vector)
myV <- Venn(vList)
setmap(myV)
if (!require(devtools)) install.packages("devtools")
devtools::install_github("yanlinlin82/ggvenn")
library(ggVenn)
library(ggvenn)
?ggvenn
ggvenn(myV)
myV <- Venn(vList)
vList <- lapply(list(list1, list2, list3, list4, list5), as_vector)
ggvenn(vList)
library(tidyverse)
vList <- lapply(list(list1, list2, list3, list4, list5), as_vector)
ggvenn(vList)
list1 <- read_csv("GeneCompare2/Demo/list1.csv")
list2 <- read_csv("GeneCompare2/Demo/list2.csv")
list3 <- read_csv("GeneCompare2/Demo/list3.csv")
list4 <- read_csv("GeneCompare2/Demo/list4.csv")
list5 <- read_csv("GeneCompare2/Demo/list5.csv")
vList <- lapply(list(list1, list2, list3, list4, list5), as_vector)
ggvenn(vList)
?ggheat
ggplot(vList) +
geom_tile()
heatmap(vList)
?setmap
library(RVenn)
?setmap
setmap(myV)
setmap(vList)
myV <- Venn(vList)
setmap(vList)
myV <- Venn(vList)
setmap(myV)
?setmap
?enrichment_test
enrichment_test(myV)
myV
enrichment_test(myV, Set_1, Set_2)
enrichment_test(myV, myV$Set_1, myV$Set_2)
setmap(myV, set_clustering = FALSE, element_clustering = FALSE)
shiny::runApp('test')
runApp('test')
shiny::runApp('test')
?grid.draw
runApp('test')
?save
runApp('test')
load("D:/Downloads/2020-04-27_intersections.RData")
overlaps
runApp('test')
load("D:/Downloads/2020-04-27_intersections (1).RData")
View(dat)
View(dat)
dat
runApp('test')
runApp('test')
load("D:/Downloads/2020-04-27_intersections (8).RData")
runApp('test')
load("D:/Downloads/2020-04-27_intersections (9).RData")
runApp('test')
?setmap
library(RVenn)
?setmap
runApp('test')
runApp('test')
?Venn
runApp('test')
runApp('test')
runApp('test')
runApp('GeneCompare/GeneCompare.R')
runApp('GeneCompare/GeneCompare.R')
?downloadButton
runApp('GeneCompare/GeneCompare.R')
?actionButton
runApp('GeneCompare/GeneCompare.R')
?img
runApp('GeneCompare/GeneCompare.R')
runApp('GeneCompare/GeneCompare.R')
runApp('GeneCompare/GeneCompare.R')
